## 初始化配置至配置服务及初始化本服务数据库
preJob:
  # job 超时时间
  timeout: 1200
  # 工具 jar 包镜像库地址
  image: registry.cn-shanghai.aliyuncs.com/c7n/dbtool:0.7.1
  # 初始化数据库定义
  preInitDB:
    # 是否初始化本服务数据库
    enabled: true
    datasource:
      # 本服务数据库相关信息
      url: jdbc:mysql://localhost:3306/?useUnicode=true&characterEncoding=utf-8&useSSL=false&useInformationSchema=true&remarks=true&serverTimezone=Asia/Shanghai
      username: username
      password: password
      driver: com.mysql.jdbc.Driver
    datasources:
      # 多数据源初始化
      platform:
         url: jdbc:mysql://localhost:3306/?useUnicode=true&characterEncoding=utf-8&useSSL=false&useInformationSchema=true&remarks=true&serverTimezone=Asia/Shanghai
         username: username
         password: password
         driver: com.mysql.jdbc.Driver

## 实例运行数量
replicaCount: 1

## 设置默认的 image、imageTag 和 imagePullPolicy。
image:
  repository: registry.cn-shanghai.aliyuncs.com/c7n/devops-service
  tag: ~
  pullPolicy: IfNotPresent

## Deployment 更新策略
deploymentUpdate:
  type: RollingUpdate
  maxUnavailable: 0
  maxSurge: 100%

## Pod 优先级设置
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""

## Pod 节点分配
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}
tolerations: []
affinity: {}

## 给 Pod 附加的 annotations
podAnnotations: {}

## ## Pod 附加的 labels
podLabels: {}

## 实例运行时的环境变量
env:
  open:
    # 本实例服务端口
    SERVER_PORT: 8060
    # 本实例管理端口
    MANAGEMENT_SERVER_PORT: 8061

    # 是否启用配置中心
    SPRING_CLOUD_CONFIG_ENABLED: false
    # 配置中心地址
    SPRING_CLOUD_CONFIG_URI: http://register-server:8000

    # Redis 主机地址
    SPRING_REDIS_HOST: localhost
    # Redis 端口
    SPRING_REDIS_PORT: 6379
    # Redis db
    SPRING_REDIS_DATABASE: 9

    # 注册服务地址
    EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://register-server:8000/eureka/

    # 主机agent下载地址
    C7N_AGENT_BINARY_URL: http://example.com/c7n-agent-1.0.0
    # 主机agent版本
    C7N_AGENT_VERSION: 1.0.0

    # 数据库连接地址
    SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/devops_service?useUnicode=true&characterEncoding=utf-8&useSSL=false&useInformationSchema=true&remarks=true&serverTimezone=Asia/Shanghai
    # 数据库用户名
    SPRING_DATASOURCE_USERNAME: choerodon
    # 数据库密码
    SPRING_DATASOURCE_PASSWORD: password

    # Gitlab http(s) 协议访问地址
    SERVICES_GITLAB_URL: http://git.example.com
    # Gitlab ssh 协议访问地址
    SERVICES_GITLAB_SSHURL: git@git.example.com
    # 新建 Gitlab 用户的默认可创建仓库数量
    SERVICES_GITLAB_PROJECTLIMIT: 0

    # Helm chart 仓库地址
    SERVICES_HELM_URL: helm.example.com
    # Helm chart 仓库 的用户名, 选填(与密码要配对)
    SERVICES_HELM_USERNAME:
    # Helm chart 仓库 的密码, 选填(与用户名要配对)
    SERVICES_HELM_PASSWORD:

    # Choerodon 平台 api 地址
    SERVICES_GATEWAY_URL: http://api.example.com
    # Choerodon 平台 前端 地址
    SERVICES_FRONT_URL: http://app.example.com

    # 指定 cluster-agent 与本服务匹配的版本
    AGENT_VERSION: 0.22.1
    # cluster-agent 访问本服务的 websocket 地址
    AGENT_SERVICEURL: ws://devops.example.com/websocket
    # agent 的 helm chart 仓库地址
    AGENT_REPOURL: https://openchart.choerodon.com.cn/choerodon/c7n/
    # cert-manager 的 helm chart 仓库地址
    AGENT_CERTMANAGERURL: https://openchart.choerodon.com.cn/choerodon/c7n/
    # agent初始化repo时并发数
    AGENT_REPOCONCURRENCYSYNCSIZE: 1
    # 日志级别
    LOG_LEVEL: info

    # 忽略校验的接口路径
    CHOERODON_RESOURCE_JWT_IGNORE: /workflow/**, /sonar/**, /ci, /sonar/info, /v2/api-docs, /agent/**, /ws/**, /gitlab/email, /webhook/**, /v2/choerodon/**, /choerodon/**, /actuator/**, /prometheus, /devops/**, /pre_stop
    NEXUS_PROXY_URIPREFIX : /rdupm/v1/nexus/proxy
    ## Skywalking 配置参数
    # SKYWALKING_OPTS: >-
    #   -javaagent:/agent/skywalking-agent.jar
    #   -Dskywalking.agent.application_code=devops-service
    #   -Dskywalking.agent.sample_n_per_3_secs=6
    #   -Dskywalking.collector.backend_service=oap.skywalking:11800

    # 百分比使用物理内存，预留一部分用于堆外内存以及外部程序
    JAVA_OPTS: >-
      -XX:MaxRAMPercentage=80.0

## Liveness 和 Readiness 探针相关配置
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
livenessProbe:
  initialDelaySeconds: 180
  periodSeconds: 30
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3
readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 15
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3

## 资源请求和限制相关配置
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources: 
  limits:
    # cpu: 100m
    memory: 3Gi
  requests:
    # cpu: 100m
    memory: 3Gi

## 插件相关配置
plugins:
  # skywalking agent 镜像地址
  skywalkingAgentImage: registry.cn-shanghai.aliyuncs.com/c7n/skywalking-agent:6.6.0

## service 相关设置
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  # 是否启用 service 暴露本服务
  enabled: true
  # Service 名称
  name: devops-service
  # Service 类型
  type: ClusterIP
  # 指定 service 的 clusterIP
  clusterIP: ~
  # 端口设置
  ports: 
    # 服务端口
    http: 
      port: 8060
      nodePort: 30138
    # 管理端口
    actuator: 
      port: 8061
      nodePort: 30139
  ## externalIPs 设置
  # externalIPs:
  #   - externalIp1
  annotations: {}
    # prometheus.io/scrape: 'true'
    # prometheus.io/path: '/actuator/prometheus'
    # prometheus.io/port: '8061'

## 指标收集
metrics:
  # 收集应用的指标数据路径
  path: /actuator/prometheus
  # 性能指标应用分组
  group: spring-boot

## 日志收集
logs:
  enabled: false
  # 日志收集格式
  parser: spring-boot

## Ingress 相关配置 
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # nginx.ingress.kubernetes.io/whitelist-source-range: 0.0.0.0/0
  path: /
  host: devops.example.com
  tls: []
  # - secretName: devops-example-tls
  #   hosts:
  #   - devops.example.com