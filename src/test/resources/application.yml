spring:
  datasource:
    password: sa
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=Mysql;TRACE_LEVEL_SYSTEM_OUT=1;
    username: sa
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration # 关闭LiquibaseAutoConfiguration
      - org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration # 关闭KafkaAutoConfiguration的自动化配置
#      - org.hzero.boot.admin.AdminRegistrationAutoConfiguration # 关闭服务自动注册到admin
  h2:
    console:
      enabled: true
  cloud:
    service-registry:
      auto-registration:
        enabled: false   # 关闭自动注册
eureka:
  client:
    enabled: false # 关闭eureka
mybatis:
  mapperLocations: classpath*:/mapper/*.xml
  configuration:
    mapUnderscoreToCamelCase: true
services:
  harbor:
    update: false
    baseUrl: "harbor.example.com" # harbor地址
    username: "123456" # harbor用户名
    password: "123456" # 对应harbor用户名的密码
    insecureSkipTlsVerify: false
  gitlab:
    url: "gitlab.example.com" # gitlab地址
    sshUrl: "gitlab.example.com" # 用于ssh操作的gitlab地址
    projectLimit: 100 # gitlab用户可以创建的项目的数量限制
  helm:
    url: "helm.example.com" # 存放helm chart包的仓库地址
    userName: # Helm chart 仓库 的用户名, 选填(与密码要配对)
    password: # Helm chart 仓库 的密码, 选填(与用户名要配对)
  gateway:
    url: "http://api.example.com" # 网关地址
  sonarqube:
    url: http://sonarqube.example.com/
    username: admin
    password: password
devops:
  # 占用主机的过期时间, 超过这个时间, 主机会被释放
  host:
    # 二进制文件下载地址
    binary-download-url: ${C7N_AGENT_BINARY_URL:http://examplle.minio.com/agent/c7n-agent-1.0.0}
    # agent版本
    agent-version: ${C7N_AGENT_VERSION:1.0.0}
  ansible:
    image: registry.cn-shanghai.aliyuncs.com/c7n/kubeadm-ha:0.1.0
  #下载jar的代理地址
  proxy:
    # 过滤器拦截的uri前缀
    uriPrefix: ${NEXUS_PROXY_URIPREFIX:/rdupm/v1/nexus/proxy}
  # helm 下载地址
  helm:
    download-url: https://file.choerodon.com.cn/kubernetes-helm/v3.2.4/helm-v3.2.4-linux-amd64.tar.gz
    #jar的运行镜像
  jar:
    image: registry.cn-shanghai.aliyuncs.com/c7n/javabase:jdk8u282-b08
  # 流水线生成Gitlab Ci文件中默认的runner 镜像地址
  ci:
    default:
      image: registry.cn-shanghai.aliyuncs.com/c7n/cibase:0.9.1
    pipeline:
      sync:
        executor:
          # 核心线程池大小
          corePoolSize: 5
          # 最大线程池大小
          maxPoolSize: 8
        unterminated:
          # ci流水线对未终结的流水线进行数据补偿的时间阈值, 单位: 毫秒 (默认600秒)
          thresholdMilliSeconds: 600000
        pending:
          # ci流水线对pending的流水线进行数据补偿的时间阈值, 单位: 毫秒 (默认600秒)
          thresholdMilliSeconds: 600000
        jobEmpty:
          # ci流水线对非跳过状态的且没有job信息流水线进行数据补偿的时间阈值, 单位: 毫秒 (默认600秒)
          thresholdMilliSeconds: 600000
        refresh:
          # redisKey的过期时间, 用于控制同一条流水线的刷新间隔, 减少对gitlab的访问次数
          periodSeconds: 60
  # 批量部署的请求条数限制
  batch:
    deployment:
      maxSize: 20
agent:
  version: "0.5.0" # devops-service此版本所预期的 choerodon-agent 的版本
  serviceUrl: "agent.example.com" # 用于 choerodon-agent 连接 devops-service 的地址
  certManagerUrl: "agent.example.com" # 存放CertManager的地址，用于安装
  repoUrl: "helm.example.com" # 存放agent的地址，用于安装

# liquibase初始化配置
data:
  # 选择初始化资源目录
  dir: src/test/resources
# 日志级别设置
logging:
  level:
    root: info
hzero:
  admin:
    auto-registry:
      enable: false