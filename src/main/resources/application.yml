spring:
  datasource:
    url: jdbc:mysql://localhost/devops_service?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: choerodon
    password: choerodon
    hikari:
      # 连接池最小空闲连接数
      minimum-idle: ${SPRING_DATASOURCE_MINIMUM_IDLE:20}
      # 连接池允许的最大连接数
      maximum-pool-size: ${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:60}
      # 等待连接池分配连接的最大时长（毫秒）
      connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}
  redis:
    host: localhost
    database: ${SPRING_REDIS_DATABASE:1}
  http:
    encoding:
      charset: UTF-8
      force: true
      enabled: true
  servlet:
    multipart:
      enabled: true
      max-request-size: 100MB
      max-file-size: 100MB

services:
  gitlab:
    url: "gitlab.example.com" # gitlab地址
    sshUrl: "gitlab.example.com" # 用于ssh操作的gitlab地址
    projectLimit: 100 # gitlab用户可以创建的项目的数量限制
  helm:
    url: "helm.example.com" # 存放helm chart包的仓库地址
    userName: # Helm chart 仓库 的用户名, 选填(与密码要配对)
    password: # Helm chart 仓库 的密码, 选填(与用户名要配对)
  gateway:
    url: "http://api.example.com" # 网关地址
  front:
    url: "http://app.example.com"
  sonarqube:
    url: http://sonarqube.example.com/
    username: admin
    password: password
hzero:
  service:
    platform:
      name: choerodon-platform
    oauth:
      name: choerodon-oauth
    iam:
      name: choerodon-iam
    file:
      name: choerodon-file
    message:
      name: choerodon-message
    admin:
      name: choerodon-admin
    swagger:
      name: choerodon-swagger
    gateway:
      name: choerodon-gateway
    monitor:
      name: choerodon-monitor
  websocket:
    # 用于连接websocket的路径
    websocket: /websocket
    # 与当前服务的redis数据库一致
    redisDb: ${SPRING_REDIS_DATABASE:1}
    # 后端长连通信密钥
    secretKey: devops_ws
    # oauth服务用于查询用户信息的接口
    oauth-url: ${OAUTH_USER_URL:http://choerodon-oauth/oauth/api/user}
choerodon:
  saga:
    service: choerodon-asgard
    consumer:
      core-thread-num: 20
      max-thread-num: 20 # 消费线程数
      poll-interval: 3 # 拉取消息的间隔(秒)，默认1秒
      enabled: true # 是否启用消费端
  schedule:
    consumer:
      enabled: true # 启用任务调度消费端
      thread-num: 1 # 任务调度消费线程数
      poll-interval-ms: 1000 # 拉取间隔，默认1000毫秒
  resource:
    jwt:
      ignore: /workflow/**, /sonar/**, /ci, /sonar/info, /v2/api-docs, /agent/**, /ws/**, /gitlab/email, /webhook/**, /v2/choerodon/**, /choerodon/**, /actuator/**, /prometheus, /devops/**, /pre_stop, /websocket
agent:
  version: "0.5.0" # devops-service此版本所预期的 choerodon-agent 的版本
  serviceUrl: "agent.example.com" # 用于 choerodon-agent 连接 devops-service 的地址
  repoUrl: "helm.example.com" # 存放agent的地址，用于安装
  repoConcurrencySyncSize: 1 # Agent初始化repo时并发数
  # CertManager相关的配置
  cert-manager:
    # 存放CertManager的chart的仓库地址，用于安装
    repoUrl: ${AGENT_CERTMANAGERURL:agent.example.com}
    # 安装的CertManager的实例名称（之所以要写成cert-manager是因为 CertManager 本身的一个bug，将其自己的部分k8s资源写死了名称）
    releaseName: ${CERT_MANAGER_RELEASE_NAME:cert-manager}
    # 安装的CertManager的chart版本
    chartVersion: ${CERT_MANAGER_CHART_VERSION:1.1.1}
    # 安装的CertManager的namespace
    namespace: ${CERT_MANAGER_NAMESPACE:cert-manager}
mybatis:
  mapperLocations: classpath*:/mapper/*.xml
  configuration:
    mapUnderscoreToCamelCase: true
    key-generator: snowflake
    snowflake:
      start-timestamp: 1577808000000
      meta-provider: redis
      meta-provider-redis-db: ${SPRING_REDIS_DATABASE:1}
      meta-provider-redis-refresh-interval: 540000
      meta-provider-redis-expire: 600000
      # 五位，配置为5位最大值
      data-center-id: 31

feign:
  hystrix:
    shareSecurityContext: true
    command:
      default:
        execution:
          isolation:
            thread:
              timeoutInMilliseconds: 30000
    enabled: true
hystrix:
  shareSecurityContext: true
  # 配置参考 https://github.com/Netflix/Hystrix/wiki/Configuration#ThreadPool
  threadpool:
    default:
      # 最大排队数量
      maxQueueSize: ${HYSTRIX_MAX_QUEUE_SIZE:300}
      # 排队数量阈值, 超过会被拒绝, 只在maxQueueSize不等于-1时生效
      queueSizeRejectionThreshold: ${HYSTRIX_QUEUE_SIZE_REJECTION_THRESHOLD:200}
      # 线程池最大线程数
      maximumSize: 30
      # 核心线程数, 10是默认值
      coreSize: 10
  command:
    default:
      circuitBreaker:
        sleepWindowInMilliseconds: 100000
        forceClosed: true
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 600000
ribbon:
  ConnectTimeout: 50000
  ReadTimeout: 50000

asgard-servie:
  ribbon:
    ConnectTimeout: 50000
    ReadTimeout: 50000

logging:
  level:
    #    io.choerodon.event.consumer: debug
    #    com.zaxxer: debug
    io.choerodon.feign: warn
    com.netflix: warn
  #    io.choerodon.devops.app.service: debug
  config: classpath:logback-spring.xml


devops:
  # helm 下载地址
  helm:
    download-url: https://file.choerodon.com.cn/kubernetes-helm/v3.2.4/helm-v3.2.4-linux-amd64.tar.gz
  # 占用主机的过期时间, 超过这个时间, 主机会被释放
  host:
    # 二进制文件下载地址
    binary-download-url: ${C7N_AGENT_BINARY_URL:http://examplle.minio.com/agent/c7n-agent-1.0.0}
    # agent版本
    agent-version: ${C7N_AGENT_VERSION:1.0.0}
  # 流水线生成Gitlab Ci文件中默认的runner 镜像地址
  ci:
    default:
      image: ${CI_DFAULT_IMAGE:registry.cn-shanghai.aliyuncs.com/c7n/cibase:0.11.4}
    pipeline:
      sync:
        executor:
          # 核心线程池大小
          corePoolSize: 5
          # 最大线程池大小
          maxPoolSize: 8
        unterminated:
          # ci流水线对未终结的流水线进行数据补偿的时间阈值, 单位: 毫秒 (默认600秒)
          thresholdMilliSeconds: 600000
        pending:
          # ci流水线对pending的流水线进行数据补偿的时间阈值, 单位: 毫秒 (默认600秒)
          thresholdMilliSeconds: 600000
        jobEmpty:
          # ci流水线对非跳过状态的且没有job信息流水线进行数据补偿的时间阈值, 单位: 毫秒 (默认600秒)
          thresholdMilliSeconds: 600000
        refresh:
          # redisKey的过期时间, 用于控制同一条流水线的刷新间隔, 减少对gitlab的访问次数
          periodSeconds: 60
  # 批量部署的请求条数限制
  batch:
    deployment:
      maxSize: 20
  #下载jar的代理地址
  proxy:
    # 过滤器拦截的uri前缀
    uriPrefix: ${NEXUS_PROXY_URIPREFIX:/rdupm/v1/nexus/proxy}
  #jar的运行镜像
  jar:
    image: registry.cn-shanghai.aliyuncs.com/c7n/javabase:jdk8u282-b08
  deploy:
    # 部署时是否删除gitops文件空行，true代表删除
    enableDeleteBlankLine: ${DEVOPS_DEPLOY_ENABLE_DELETE_BLANKLINE:true}
# websocket的最大缓冲区大小，单位字节byte
websocket:
  buffer:
    # 默认 128 KiB
    maxTextMessageSize: 131072
    # 默认 512KiB
    maxBinaryMessageSize: 524288