spring:
  datasource:
    url: jdbc:mysql://localhost/devops_service?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: choerodon
    password: choerodon
    hikari:
      # 连接池最小空闲连接数
      minimum-idle: ${SPRING_DATASOURCE_MINIMUM_IDLE:20}
      # 连接池允许的最大连接数
      maximum-pool-size: ${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:60}
      # 等待连接池分配连接的最大时长（毫秒）
      connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}
  redis:
    host: localhost
    database: ${SPRING_REDIS_DATABASE:1}
    # Redis连接超时时间
    connect-timeout: ${SPRING_REDIS_CONNECT_TIMEOUT:2000}
    # Redis读取超时时间
    timeout: ${SPRING_REDIS_READ_TIMEOUT:5000}
  servlet:
    multipart:
      enabled: true
      max-request-size: 100MB
      max-file-size: 100MB
  web:
    resources:
      # 资源缓存时间，单位秒
      cache:
        period: 3600
      chain:
        # 开启压缩
        compressed: true
        # 启用缓存
        cache: true
server:
  undertow:
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接
      # 默认值为8，建议设置每个CPU核心一个线程
      io: ${SERVER_UNDERTOW_IO_THREADS:4}
      # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程
      # 默认等于 io-threads*8，它的值设置取决于系统的负载，可适当调大该值
      worker: ${SERVER_UNDERTOW_WORKER_THREADS:128}
    # 每块buffer的空间大小，越小空间被利用越充分
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: ${SERVER_UNDERTOW_BUFFER_SIZE:1024}
    # 是否分配的直接内存(NIO直接分配的堆外内存)。默认false
    direct-buffers: true
    # HTTP POST请求最大的大小。默认0，无限制，可设置10M
    max-http-post-size: 10485760
services:
  gitlab:
    proxy-url: ${SERVICES_GITLAB_PROXY_URL:} # 代理服务地址, 可为空 (v1.1)
    url: "gitlab.example.com" # gitlab地址
    sshUrl: "gitlab.example.com" # 用于ssh操作的gitlab地址
    projectLimit: 100 # gitlab用户可以创建的项目的数量限制
  helm:
    url: "helm.example.com" # 存放helm chart包的仓库地址
    userName: # Helm chart 仓库 的用户名, 选填(与密码要配对)
    password: # Helm chart 仓库 的密码, 选填(与用户名要配对)
  gateway:
    url: "http://api.example.com" # 网关地址
  front:
    url: "http://app.example.com"
  sonarqube:
    url: http://sonarqube.example.com/
    username: admin
    password: password
hzero:
  service:
    platform:
      name: choerodon-platform
    oauth:
      name: choerodon-oauth
    iam:
      name: choerodon-iam
    file:
      name: choerodon-file
    message:
      name: choerodon-message
    admin:
      name: choerodon-admin
    swagger:
      name: choerodon-swagger
    gateway:
      name: choerodon-gateway
    monitor:
      name: choerodon-monitor
  websocket:
    # 用于连接websocket的路径
    websocket: /websocket
    # 与当前服务的redis数据库一致
    redisDb: ${SPRING_REDIS_DATABASE:1}
    # 后端长连通信密钥
    secretKey: devops_ws
    # oauth服务用于查询用户信息的接口
    oauth-url: ${OAUTH_USER_URL:http://choerodon-oauth/oauth/api/user}
choerodon:
  saga:
    service: choerodon-asgard
    consumer:
      core-thread-num: 20
      max-thread-num: 20 # 消费线程数
      poll-interval: 3 # 拉取消息的间隔(秒)，默认1秒
      enabled: true # 是否启用消费端
  schedule:
    consumer:
      enabled: true # 启用任务调度消费端
      thread-num: 1 # 任务调度消费线程数
      poll-interval-ms: 1000 # 拉取间隔，默认1000毫秒
  resource:
    jwt:
      ignore: /workflow/**, /sonar/**, /ci, /sonar/info, /v2/api-docs, /agent/**, /ws/**, /gitlab/email, /webhook/**, /v2/choerodon/**, /choerodon/**, /actuator/**, /prometheus, /devops/**, /pre_stop, /websocket
  sass:
    resource-limit:
      gitlab:
        standard: ${CHOERODON_SASS_RESOURCE_LIMIT_GITLAB_STANDARD:2147483648} # 1024 * 1024 * 1024 * 2  (2G)
        senior: ${CHOERODON_SASS_RESOURCE_LIMIT_GITLAB_SENIOR:10737418240} # 1024 * 1024 * 1024 * 10 (10G)
agent:
  version: "0.5.0" # devops-service此版本所预期的 choerodon-agent 的版本
  serviceUrl: "agent.example.com" # 用于 choerodon-agent 连接 devops-service 的地址
  repoUrl: "helm.example.com" # 存放agent的地址，用于安装
  repoConcurrencySyncSize: 1 # Agent初始化repo时并发数
  # CertManager相关的配置
  cert-manager:
    # 存放CertManager的chart的仓库地址，用于安装
    repoUrl: ${AGENT_CERTMANAGERURL:agent.example.com}
    # 安装的CertManager的实例名称（之所以要写成cert-manager是因为 CertManager 本身的一个bug，将其自己的部分k8s资源写死了名称）
    releaseName: ${CERT_MANAGER_RELEASE_NAME:cert-manager}
    # 安装的CertManager的chart版本
    chartVersion: ${CERT_MANAGER_CHART_VERSION:1.1.1}
    # 安装的CertManager的namespace
    namespace: ${CERT_MANAGER_NAMESPACE:cert-manager}
mybatis:
  mapperLocations: classpath*:/mapper/*.xml
  configuration:
    mapUnderscoreToCamelCase: true
    key-generator: snowflake
    snowflake:
      start-timestamp: 1577808000000
      meta-provider: redis
      meta-provider-redis-db: ${SPRING_REDIS_DATABASE:1}
      meta-provider-redis-refresh-interval: 540000
      meta-provider-redis-expire: 600000
      # 五位，配置为5位最大值
      data-center-id: 31

feign:
  circuitbreaker:
    # 启用断路器
    enabled: ${FEIGN_CIRCUITBREAKER_ENABLED:true}
  # 请求压缩配置
  compression:
    request:
      # 配置请求GZIP压缩
      enabled: ${FEIGN_COMPRESSION_REQUEST_ENABLED:true}
      # 配置压缩数据大小的下限
      min-request-size: ${FEIGN_COMPRESSION_REQUEST_MIN_REQUEST_SIZE:2048}
  # Feign客户端配置
  client:
    config:
      # Feign客户端默认配置
      default:
        # 连接超时
        connectTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_CONNECT_TIMEOUT:2000}
        # 读取超时
        readTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_READ_TIMEOUT:5000}
        # Feign日志级别：NONE/BASIC/HEADERS/FULL
        loggerLevel: ${FEIGN_CLIENT_CONFIG_DEFAULT_LOGGER_LEVEL:FULL}

asgard-servie:
  ribbon:
    ConnectTimeout: 50000
    ReadTimeout: 50000

logging:
  level:
    org.springframework.cloud: info
    io.github.resilience4j: info
    com.netflix.discovery: warn
    org.hzero.boot.platform.lov: info
    org.apache.ibatis: ${LOG_LEVEL:info}
    io.choerodon: ${LOG_LEVEL:info}
    org.hzero: ${LOG_LEVEL:info}
  #    io.choerodon.devops.app.service: debug
  config: classpath:logback-spring.xml


devops:
  # helm 下载地址
  helm:
    download-url: https://file.choerodon.com.cn/kubernetes-helm/v3.2.4/helm-v3.2.4-linux-amd64.tar.gz
  # 占用主机的过期时间, 超过这个时间, 主机会被释放
  host:
    # 二进制文件下载地址
    binary-download-url: ${C7N_AGENT_BINARY_URL:http://examplle.minio.com/agent/c7n-agent-1.0.0}
    # agent版本
    agent-version: ${C7N_AGENT_VERSION:1.0.0}
  # 流水线生成Gitlab Ci文件中默认的runner 镜像地址
  ci:
    default:
      image: ${CI_DFAULT_IMAGE:registry.cn-shanghai.aliyuncs.com/c7n/cibase:0.11.4}
      rule-number: ${CI_DFAULT_RULE_NUMBER:1} # 流水线的ci生成规则版本，如果有修改则加1
    pipeline:
      sync:
        executor:
          # 核心线程池大小
          corePoolSize: 5
          # 最大线程池大小
          maxPoolSize: 8
        unterminated:
          # ci流水线对未终结的流水线进行数据补偿的时间阈值, 单位: 毫秒 (默认600秒)
          thresholdMilliSeconds: 600000
        pending:
          # ci流水线对pending的流水线进行数据补偿的时间阈值, 单位: 毫秒 (默认600秒)
          thresholdMilliSeconds: 600000
        jobEmpty:
          # ci流水线对非跳过状态的且没有job信息流水线进行数据补偿的时间阈值, 单位: 毫秒 (默认600秒)
          thresholdMilliSeconds: 600000
        refresh:
          # redisKey的过期时间, 用于控制同一条流水线的刷新间隔, 减少对gitlab的访问次数
          periodSeconds: 60
  # 批量部署的请求条数限制
  batch:
    deployment:
      maxSize: 20
  #下载jar的代理地址
  proxy:
    # 过滤器拦截的uri前缀
    uriPrefix: ${NEXUS_PROXY_URIPREFIX:/rdupm/v1/nexus/proxy}
  #jar的运行镜像
  jar:
    image: registry.cn-shanghai.aliyuncs.com/c7n/javabase:jdk8u282-b08
  deploy:
    # 部署时是否删除gitops文件空行，true代表删除
    enableDeleteBlankLine: ${DEVOPS_DEPLOY_ENABLE_DELETE_BLANKLINE:true}
  proxyToken: ${DEVOPS_PROXY_TOKEN:xxxxx}  # 代理认证token(v1.1新增，可为空)
# websocket的最大缓冲区大小，单位字节byte
websocket:
  buffer:
    # 默认 128 KiB
    maxTextMessageSize: 131072
    # 默认 512KiB
    maxBinaryMessageSize: 524288
DesEncrypt:
  # 加解密密钥
  desKey: ${DES_ENCRYPT_DES_KEY:W1CLYB54T44PAL8NCGV4999OVSDCAEIPY76W32INQNXTH86ZEF1R1HTTWBLMQ5LQ5D9FLTUDNBLUQM9YF94NJTIJNOVIUFS13FRXUZD6D52JIPMUNI0AE9QN1Q2G1HHN}
  # 长度：8位
  desIV: ${DES_ENCRYPT_DES_IV:7HHT5EVO}

nexus:
  default:
    url: ${NEXUS_DEFAULT_URL:http://example.com}
  proxy:
    url: ${NEXUS_PROXY_URL:http://example.com}